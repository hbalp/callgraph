(* Copyright @: Thales Communications & Security *)
(* Author: Hugues Balp *)
(* This file completes json files generated by Callers with "extcallee_defs" members *)

exception Internal_Error
exception Unexpected_Case
exception Usage_Error
exception TBC

module Callers = Map.Make(String);;
module Callees = Map.Make(String);;

class function_callees_json_parser (callee_json_filepath:string) = object(self)

  val callee_file_path : string = callee_json_filepath

  method read_json_file (filename:string) : Yojson.Basic.json =

    Printf.printf "In_channel read file %s...\n" filename;
    (* Read JSON file into an OCaml string *)
    let buf = Core.Std.In_channel.read_all filename in
    (* Use the string JSON constructor *)
    let json1 = Yojson.Basic.from_string buf in
    json1

  (* method add_extcallee_def_to_function (extcallee_def:Callgraph_t.extfct) (fct:Callgraph_t.fct) : Callgraph_t.fct = *)

  (*   Printf.printf "add the extcallee_def \"%s\" to the extcallee_defs list of function \"%s\"...\n" extcallee_def.sign fct.sign; *)

  (*   let new_extcallees = *)

  (*     (match fct.extcallees with	  *)
       
  (*      | None -> extcallee::[] *)

  (*      | Some extcallees -> extcallee::extcallees *)
  (*     ) *)
  (*   in *)

  (*   let updated_fct:Callgraph_t.fct =  *)
  (*     { *)
  (* 	sign = fct.sign; *)
  (* 	line = fct.line; *)
  (* 	locallers = fct.locallers; *)
  (* 	locallees = fct.locallees; *)
  (* 	extcallees = Some new_extcallees; *)
  (* 	extcallers = fct.extcallers; *)
  (*     } *)
  (*   in *)
  (*   updated_fct *)

  (** Return the location of the function definition when found in the inpout jsonfilepath *)
  method search_function_def_location_in_file (fct_sign:string) (jsonfilepath:string) : string option =

    Printf.printf "Return the location of the function's definition declared as \"%s\" when found in the inpout jsonfilepath \"%s\"...\n" fct_sign jsonfilepath;
    (* Parse the input json file *)
    let dirpath : string = Common.read_before_last '/' jsonfilepath in
    let filename : string = Common.read_after_last '/' 1 jsonfilepath in
    let jsoname_file = String.concat "" [ dirpath; "/"; filename; ".file.callers.gen.json" ] in
    (* Use the atdgen Yojson parser *)
    let json : Yojson.Basic.json = self#read_json_file jsoname_file in
    let content : string = Yojson.Basic.to_string json in
    Printf.printf "Read json file \"%s\" content is:\n %s: \n" filename content;
    Printf.printf "atdgen parsed json file is :\n";
    let file : Callgraph_t.file = Callgraph_j.file_of_string content in
    print_endline (Callgraph_j.string_of_file file);
    
    (* Look for the callee function among all functions defined in the json file *)
    let search_fct_def : string option =

      (match file.defined with

       | None ->
  	  (
  	    Printf.printf "The callee function \"%s\" is not defined in file \"%s\" ! So we need to look for it somewhere else...\n"
  			  fct_sign jsonfilepath;
	    None
  	  )

       | Some fcts ->
	 (
	   try
	     (
  	       let found_fct : Callgraph_t.fct =
  		 List.find
  		   (
		     (* Check whether the function is the searched one *)
  		     fun (fct:Callgraph_t.fct) -> String.compare fct.sign fct_sign == 0
		   )
  		   fcts
	       in

	       Printf.printf "Found definition of function \"%s\" in file \"%s\" at line %d.\n"
		 fct_sign file.file found_fct.line;

	       let found_fct_def : string = Printf.sprintf "%s/%s:%d" file.path file.file found_fct.line
	       in
	       Some found_fct_def
  	     )
  	   with
  	     Not_found ->
  	       (
  		 Printf.printf "The callee function \"%s\" is not defined in file \"%s\" ! So we need to look for it somewhere else...\n"
  		   fct_sign jsonfilepath;
		 None
  	       )
	 )
      )
    in
    search_fct_def

  (*   (\* WARNING: in cases where the callee function is never used locally as a caller one, *)
  (*       it might not yet been present in the input callee json file; therefore we have to add it once *)
  (*       we know it is called from outside of the file. *\) *)

  (*   (\* Check whether the callee function is well present in the callee file. *\) *)
  (*   try *)
  (*     ( *)
  (* 	let _ (\*already_existing_callee_fct*\) =  *)
  (* 	  List.find *)
  (* 	    ( *)
  (* 	      fun (fct:Callgraph_t.fct) -> String.compare fct.sign fct_sign == 0 *)
  (* 	    ) *)
  (* 	    new_defined_functions *)
  (* 	in *)

  (* 	(\* The callee function does already exists in the callee file. *\) *)

  (* 	let new_file : Callgraph_t.file =  *)
  (* 	  { *)
  (* 	    file = file.file; *)
  (* 	    path = file.path; *)
  (* 	    defined = Some new_defined_functions; *)
  (* 	  } *)
  (* 	in *)
  (* 	self#print_edited_file new_file	jsoname_file *)
  (*     ) *)
  (*   with *)
  (*     Not_found ->  *)
  (*     ( *)
  (* 	Printf.printf "The callee function \"%s\" is not yet present in file \"%s\" as expected; so we add it to satisfy the external call relationship\n" *)
  (* 		      fct_sign file.file; *)

  (* 	let newly_added_callee_fct : Callgraph_t.fct =  *)
  (* 	  { *)
  (* 	    sign = fct_sign; *)
  (* 	    line = -1; *)
  (* 	    locallers = None; *)
  (* 	    locallees = None; *)
  (* 	    extcallee_defs = Some [ extcallee_def ]; *)
  (* 	    extcalees = None; *)
  (* 	  } *)
  (* 	in *)

  (* 	(\* Now the callee function will be added to the callee file. *\) *)

  (* 	let new_file : Callgraph_t.file =  *)
  (* 	  { *)
  (* 	    file = file.file; *)
  (* 	    path = file.path; *)
  (* 	    defined = Some (newly_added_callee_fct::new_defined_functions); *)
  (* 	  } *)
  (* 	in *)
  (* 	self#print_edited_file new_file jsoname_file *)
      (* ) *)
      
  method print_edited_file (edited_file:Callgraph_t.file) (json_filename:string) =

    let jfile = Callgraph_j.string_of_file edited_file in
    print_endline jfile;
    (* Write the new_file serialized by atdgen to a JSON file *)
    (* let new_jsonfilepath:string = Printf.sprintf "%s.new.json" json_filename in *)
    (* Core.Std.Out_channel.write_all new_jsonfilepath jfile *)
    Core.Std.Out_channel.write_all json_filename jfile

  method parse_caller_file (*fct_sign:string*) (json_filepath:string) : Callgraph_t.file =

    (* Use the atdgen Yojson parser *)
    let dirpath : string = Common.read_before_last '/' json_filepath in
    let filename : string = Common.read_after_last '/' 1 json_filepath in
    let jsoname_file = String.concat "" [ dirpath; "/"; filename; ".file.callers.gen.json" ] in
    let json : Yojson.Basic.json = self#read_json_file jsoname_file in
    let content : string = Yojson.Basic.to_string json in
    Printf.printf "Read caller file \"%s\" content is:\n %s: \n" filename content;
    Printf.printf "atdgen parsed json file is :\n";
    let file : Callgraph_t.file = Callgraph_j.file_of_string content in
    print_endline (Callgraph_j.string_of_file file);
    
    (* Parse the json functions contained in the current file *)
    let edited_functions:Callgraph_t.fct list =

      (match file.defined with
      | None -> []
      | Some fcts ->
	(
	  (* Parses all defined function *)
	  let edited_functions : Callgraph_t.fct list =

	    List.map
  	      (
  		fun (fct:Callgraph_t.fct) -> 
		  (
		(* Edit external callees of each function *)
		    let edited_extcallees : Callgraph_t.extfct list =

		      (match fct.extcallees with
		      | None -> []
		      | Some extcallees ->
			Printf.printf "Try to edit external callees of function \"%s\" declared in caller file \"%s\"...\n" fct.sign file.file;
			List.map
			  ( 
			    fun (f:Callgraph_t.extfct) -> 
			      (
				(* Check whether the extcallee definition does already exists or not *)
				let extcallee_def : string =

				  (match f.def with
				  | "unknownExtFctDef" ->
				    (
				      (* Location of extcallee linked definition is not yet known. *)
				      Printf.printf "Not found definition of extcallee: sign=\"%s\", decl=%s, def=?\n" f.sign f.decl;
				      
				      let decl_infos : string list = Str.split_delim (Str.regexp ":") f.decl in

				      (match decl_infos with

				      | [ decl_file; decl_line ] ->  

					(Printf.printf "Try first to look for it in the file \"%s\" containing the callee function declaration at line %s...\n" decl_file decl_line;
					 let search_result : string option = self#search_function_def_location_in_file f.sign decl_file
					 in
					 (match search_result with
					 | Some def_loc -> def_loc
					 | None -> 
					   (
					     Printf.printf "Else try first to look for it in the related .cpp file when present...\n";
					     raise TBC
					   )
					 )
					)
				      | _ -> raise Unexpected_Case
				      )
				    )
				  | _ ->
				    (
				      (* Printf.printf "extcallee def: sign=\"%s\", decl=%s, def=%s\n" f.sign f.decl f.def; *)
				      f.def
				    )
				  )
				in

				Printf.printf "extcallee def: sign=\"%s\", decl=%s, def=%s\n" f.sign f.decl extcallee_def;
				let edited_extcallee : Callgraph_t.extfct =
				  {
		      		    sign = f.sign;
		      		    decl = f.decl;
		      		    def = extcallee_def;
				  }
				in
				edited_extcallee
			      )
			  )
			  extcallees
		      )
		    in
		    let edited_function : Callgraph_t.fct =
		      {
  			sign = fct.sign;
  			line = fct.line;
  			locallers = fct.locallers;
  			locallees = fct.locallees;
  			extcallees = Some edited_extcallees;
  			extcallers = fct.extcallers;
		      }
		    in
		    edited_function
		  )
	      )
	      fcts
	  in
	  edited_functions
	)
      )
    in

    let edited_file : Callgraph_t.file = 
      {
	file = file.file;
	path = file.path;
	defined = Some edited_functions;
      }
    in
    edited_file

end

(* Anonymous argument *)
let spec =
  let open Core.Std.Command.Spec in
  empty
  +> anon ("file_json" %: string)

(* Basic command *)
let command =
  Core.Std.Command.basic
    ~summary:"Completes external callee's funcion definitions in callers's generated json files"
    ~readme:(fun () -> "More detailed information")
    spec
    (
      fun file_json () -> 
      
      let parser = new function_callees_json_parser file_json in
      
      let edited_file = parser#parse_caller_file file_json in

      (* let jsoname_file = String.concat "." [ file_json; "edited.debug.json" ] in *)
      let jsoname_file = String.concat "" [ file_json; ".file.callers.gen.json" ] in
      parser#print_edited_file edited_file jsoname_file
    )

(* Running Basic Commands *)
let () =
  Core.Std.Command.run ~version:"1.0" ~build_info:"RWO" command

(* Local Variables: *)
(* mode: tuareg *)
(* compile-command: "ocamlbuild -use-ocamlfind -package atdgen -package core -tag thread add_extcallees.native" *)
(* End: *)
